name: "publish"

on:
  push:
    branches:
      - "main"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            target: "aarch64-apple-darwin"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-13" # for Intel based macs.
            target: "x86_64-apple-darwin"
            args: "--target x86_64-apple-darwin"
          - platform: windows-11-arm
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Get Latest Release Notes
        id: release-notes
        shell: bash
        run: |
          content=$(awk '/^##/{if(++n==1){p=1;next};if(p){exit}};p' release-notes.md)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=RELEASE_NOTES::$content"

      - name: Prepare for codesigning
        uses: sandercox/trusted-signing@main
        with:
          endpoint: "https://weu.codesigning.azure.net"
          account_name: "paralleldimension"
          profile_name: "paralleldimension-pub-trust"
          correlation_id: "github-codesign-worktreestatus"
        if: matrix.platform == 'windows-latest' || matrix.platform == 'windows-11-arm'

      # - name: Cargo Caching
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       src-tauri/target/
      #     key: ${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

          # Windows codesigning with Azure Trusted Signing
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

          # macOS codesigning
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

          # macOS notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}

          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

          # Force static openSSL
          OPENSSL_STATIC: 1
        with:
          # Only set tagName and prerelease for tag builds
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && format('v__VERSION__') || '' }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          releaseName: "WorktreeStatus v__VERSION__"
          releaseBody: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
          releaseDraft: true
          args: ${{ matrix.args }} --config src-tauri/tauri.conf.prod.json
